// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

type EnvSource = Record<string, string | undefined>;

const loadImportMetaEnv = (): EnvSource | undefined => {
  return typeof import.meta !== 'undefined'
    ? ((import.meta as ImportMeta & { env?: EnvSource })?.env ?? undefined)
    : undefined;
};

const processEnv = typeof process !== 'undefined'
  ? ((process.env ?? {}) as EnvSource)
  : undefined;

const envSource: EnvSource = loadImportMetaEnv() ?? processEnv ?? {};

const SUPABASE_URL = envSource['VITE_SUPABASE_URL'] ?? 'http://localhost:54321';
const SUPABASE_PUBLISHABLE_KEY = envSource['VITE_SUPABASE_PUBLISHABLE_KEY'] ?? 'public-anon-key';

const authStorage = typeof window !== 'undefined' && window?.localStorage ? window.localStorage : undefined;

type SupabaseClientInstance = ReturnType<typeof createClient<Database>>;

const globalSupabase = globalThis as typeof globalThis & { __supabaseClient__?: SupabaseClientInstance };

if (!globalSupabase.__supabaseClient__) {
  globalSupabase.__supabaseClient__ = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: authStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        apikey: SUPABASE_PUBLISHABLE_KEY,
      },
    },
  });
}

const supabaseInstance = globalSupabase.__supabaseClient__;

const functionsClient = supabaseInstance.functions;

if (functionsClient?.invoke) {
  const originalInvoke = functionsClient.invoke.bind(functionsClient);

  functionsClient.invoke = (async (functionName, options) => {
    const { data } = await supabaseInstance.auth.getSession();
    const accessToken = data?.session?.access_token;

    const headers = accessToken
      ? { ...options?.headers, Authorization: `Bearer ${accessToken}` }
      : options?.headers;

    return originalInvoke(functionName, { ...options, headers });
  }) as typeof functionsClient.invoke;
}

export const supabase = supabaseInstance;
