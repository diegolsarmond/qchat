// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

type EnvSource = Record<string, string | undefined>;

declare const __SUPABASE_ENV__:
  | (EnvSource & {
      VITE_SUPABASE_URL?: string;
      VITE_SUPABASE_PUBLISHABLE_KEY?: string;
    })
  | undefined;

const loadBundlerEnv = (): EnvSource | undefined => {
  if (typeof __SUPABASE_ENV__ !== 'undefined' && __SUPABASE_ENV__ !== null) {
    return __SUPABASE_ENV__;
  }

  if (typeof globalThis !== 'undefined' && '__SUPABASE_ENV__' in globalThis) {
    const globalEnv = (globalThis as typeof globalThis & { __SUPABASE_ENV__?: EnvSource }).__SUPABASE_ENV__;
    if (globalEnv) {
      return globalEnv;
    }
  }

  return undefined;
};
const loadImportMetaEnv = (): EnvSource | undefined => {
  return typeof import.meta !== 'undefined'
    ? ((import.meta as ImportMeta & { env?: EnvSource })?.env ?? undefined)
    : undefined;
};

const processEnv = typeof process !== 'undefined'
  ? ((process.env ?? {}) as EnvSource)
  : undefined;

const envSource: EnvSource = loadBundlerEnv() ?? loadImportMetaEnv() ?? processEnv ?? {};

const DEFAULT_SUPABASE_URL = 'http://localhost:54321';
const DEFAULT_SUPABASE_PUBLISHABLE_KEY = 'public-anon-key';

const SUPABASE_URL = envSource.VITE_SUPABASE_URL ?? DEFAULT_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = envSource.VITE_SUPABASE_PUBLISHABLE_KEY ?? DEFAULT_SUPABASE_PUBLISHABLE_KEY;

const authStorage = typeof window !== 'undefined' && window?.localStorage ? window.localStorage : undefined;

type SupabaseClientInstance = ReturnType<typeof createClient<Database>>;

const globalSupabase = globalThis as typeof globalThis & { __supabaseClient__?: SupabaseClientInstance };

if (!globalSupabase.__supabaseClient__) {
  globalSupabase.__supabaseClient__ = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      storage: authStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        apikey: SUPABASE_PUBLISHABLE_KEY,
      },
    },
  });
}

const supabaseInstance = globalSupabase.__supabaseClient__;

const supabaseFunctions = supabaseInstance.functions;

if (supabaseFunctions?.invoke) {
  const originalInvoke = supabaseFunctions.invoke.bind(supabaseFunctions);

  supabaseFunctions.invoke = (async (functionName, options) => {
    const { data } = await supabaseInstance.auth.getSession();
    const accessToken = data?.session?.access_token;

    const headers = accessToken
      ? { ...(options?.headers ?? {}), Authorization: `Bearer ${accessToken}` }
      : options?.headers;

    return originalInvoke(functionName, {
      ...(options ?? {}),
      ...(headers ? { headers } : {}),
    });
  }) as typeof supabaseFunctions.invoke;
}

export const supabase = supabaseInstance;
